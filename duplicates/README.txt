===========================================================
ДОМАШНЕЕ ЗАДАНИЕ
===========================================================

Найти все пары дубликатов HTML-документов алгоритмом Бродера (см. лекцию)
Реализовать на языке Python 2.7

Значения для алгоритма:
* окно для шинглов: 5
* кол-во minhashes: 20
* порог сравнения:  75% (совпадения множества minhashes, коэфф. Жаккара) (*)

Заготовка для Вашего кода: src/broder_shingles.py
В ней используются те же правила вычисления хэшей и выбора минхэшей,
 что и при автоматической проверке.
Таким образом, у Вас будет выше шанс сойтись во мнении с роботом :-)

(Не разбирайте HTML, Используйте аттрибут .text, это уже распарсенный)

===========================================================
Задания присылать в виде package.tgz на hw3duplicates@mail.ru
Subject: [HW3] BD-21, Иванов Иван

Что должно быть в архиве:
- preinstall.sh (опционально) - если вам нужно доставить какие-то модули
  Учтите, что это должны быть модули, которые _могут_ поставиться на тестовую
  конфигурацию
- run.sh (обязательно!!) - исполняемый скрипт (см. FAQ)
- ваши исходники

Что есть в окружении:
- Ubuntu 14.04LTS (x86_64)
- python 2.7
- google protobuf
- numpy

В ответ в течении нескольких минут вам придет письмо от робота.


===========================================================
Как будет происходить проверка:
===========================================================
1. пускается ./preinstall.sh
2. пускается ./run.sh file1.gz file2.gz ... >result.txt

т.е. вывод скрипта запускаемого run.sh должен идти на stdout

формат вывода:
url1 url2 0.9
url1 url8 0.8
...

3я колонка - мера схожести urlX и urlY, доля общих minhashes.
Скажем, если совпало 18 из 20 minhashes, то 0.9

Как идет проверка:
- есть опорный результат
- делается пересечение и объединение пар urlX, urlY с опорным результатом
- F = пересечение/объединение
-- слишком малое значение F - незачет


===========================================================
FAQ
===========================================================
Q: Какова производительности машины на которой будет проходить тест?
A: 232319 pystones

Q: данные архивы - отдельно или вместе?
A: Вместе. Архивы разделены исключительно для удобства отладки.

Q: Что должен делать run.sh
A: run.sh должен запускать ваш Python-скрипт. Сделано это для того, чтобы
   не требовать одинакового имени (скажем, main.py) для основного скрипта.
   Самый простой run.sh - просто запуск вашего скрипта с передачей ему параметров.
   Например, ваш скрипт называется broder_shingles.py. Тогда run.sh:
#!/bin/bash

./broder_shingles.py "$@"

Q: как считать коэффициент Жаккара в данном случае? (*)
A: Аналогично табличному методу. Скажем, у 2 документов похожи 18 из 20 миншинглов.
   Это значит, что в сумме у них 4 разных. А значит jaccard_similarity=18/(18+2*2) = 0.82
   Иными словами, пары с отличиями >= 3 миншингла в случае порога 75% не проходят.
